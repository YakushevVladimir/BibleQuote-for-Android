apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacoco {
    toolVersion = '0.8.6'
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
}

project.afterEvaluate {

    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            def lintTaskName = "lint${sourceName.capitalize()}"

            task "${testTaskName}Coverage"(
                    type: JacocoReport,
                    dependsOn: ["$lintTaskName", "$testTaskName"]) {
                group = "Reporting"
                description = "Generate Jacoco coverage reports"

                reports {
                    xml.enabled = true
                    xml.destination = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
                    html.enabled = true
                }

                def excludes = [
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/AndroidManifest.xml',
                        '**/*Test*.*',
                        'android/**/*.*',
                        'androidx/**/*.*',
                        '**/*Fragment.*',
                        '**/*Activity.*',
                        '**/*Dagger*.*', // Dagger auto-generated code.
                        '**/*MembersInjector*.*', // Dagger auto-generated code.
                        '**/*_Factory.*', // Dagger auto-generated code.
                        '**/*_*Factory*.*', // Dagger auto-generated code.
                        '**/*_ViewBinding*.*', // Butterknife auto-generated code.
                        '**/AutoValue_*.*'
                ]

                def javaClasses = fileTree(
                        dir: "${project.buildDir}/intermediates/javac/${sourcePath}",
                        excludes: excludes)
                def kotlinClasses = fileTree(
                        dir: "${project.buildDir}/tmp/kotlin-classes/${sourcePath}",
                        excludes: excludes)

                afterEvaluate {
                    classDirectories.from = files([javaClasses, kotlinClasses])
                    sourceDirectories.from = files([
                            "${project.projectDir}/src/main/java",
                            "${project.projectDir}/src/$productFlavorName/java",
                            "${project.projectDir}/src/$buildTypeName/java"
                    ])
                    executionData.from = files(fileTree(
                            include: ['*.exec'],
                            dir: "${project.buildDir}/jacoco").files)
                }
            }
        }
    }
}